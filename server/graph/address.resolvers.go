package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/yihao2000/gqlgen-todos/config"
	"github.com/yihao2000/gqlgen-todos/graph/model"
	"github.com/yihao2000/gqlgen-todos/service"
)

// User is the resolver for the user field.
func (r *addressResolver) User(ctx context.Context, obj *model.Address) (*model.User, error) {
	db := config.GetDB()
	user := new(model.User)

	return user, db.First(user, "id = ?", obj.UserID).Error
}

// CreateAddress is the resolver for the createAddress field.
func (r *mutationResolver) CreateAddress(ctx context.Context, name string, detail string, region string, city string, zipCode string, phone string, isPrimary bool) (*model.Address, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	model := &model.Address{
		ID:        uuid.NewString(),
		Name:      name,
		Detail:    detail,
		Region:    region,
		City:      city,
		ZipCode:   zipCode,
		Phone:     phone,
		IsPrimary: isPrimary,
		UserID:    userID,
	}

	return model, db.Create(model).Error
}

// TogglePrimary is the resolver for the togglePrimary field.
func (r *mutationResolver) TogglePrimary(ctx context.Context, id string) (*model.Address, error) {
	db := config.GetDB()
	model := new(model.Address)
	if err := db.First(model, "id = ?", id).Error; err != nil {
		return nil, err
	}

	model.IsPrimary = !model.IsPrimary

	return model, db.Save(model).Error
}

// Address is the resolver for the address field.
func (r *queryResolver) Address(ctx context.Context, id string) (*model.Address, error) {
	db := config.GetDB()
	address := new(model.Address)

	return address, db.First(address, "id = ?", id).Error
}

// Addresses is the resolver for the addresses field.
func (r *queryResolver) Addresses(ctx context.Context) ([]*model.Address, error) {
	db := config.GetDB()
	var models []*model.Address
	return models, db.Order("is_primary DESC").Find(&models).Error
}

// UserAddresses is the resolver for the userAddresses field.
func (r *queryResolver) UserAddresses(ctx context.Context) ([]*model.Address, error) {
	db := config.GetDB()

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	var models []*model.Address
	return models, db.Where("user_id = ?", userID).Order("is_primary DESC").Find(&models).Error
}

// Address returns AddressResolver implementation.
func (r *Resolver) Address() AddressResolver { return &addressResolver{r} }

type addressResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *addressResolver) Region(ctx context.Context, obj *model.Address) (string, error) {
	panic(fmt.Errorf("not implemented: Region - region"))
}
func (r *addressResolver) City(ctx context.Context, obj *model.Address) (string, error) {
	panic(fmt.Errorf("not implemented: City - city"))
}
func (r *addressResolver) ZipCode(ctx context.Context, obj *model.Address) (string, error) {
	panic(fmt.Errorf("not implemented: ZipCode - zipCode"))
}
func (r *addressResolver) Phone(ctx context.Context, obj *model.Address) (string, error) {
	panic(fmt.Errorf("not implemented: Phone - phone"))
}
