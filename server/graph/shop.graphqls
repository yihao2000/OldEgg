type Shop{
  id: ID!
  name: String!
  description: String!  
  image: String!
  aboutus: String!
  banner: String!
  products: [Product!]! @goField(forceResolver: true)
  banned: Boolean!
  user: User! @goField (forceResolver: true)
}

input NewShop{
  name: String!
  description: String!  
  image: String!
  aboutus: String!
  banner: String!
  userID: ID!
}

type ShopReview{
  id: ID!
  shop: Shop! @goField (forceResolver: true)
  user: User! @goField (forceResolver: true)
  transactionHeader: TransactionHeader! @goField (forceResolver: true)
  rating: Float!
  tag: String
  dateCreated: Time!
  comment: String!
  onTimeDelivery: Boolean!
  productAccurate: Boolean!
  satisfiedService: Boolean!

}

extend type Mutation{
    createShop(input: NewShop!): Shop! 
    updateShop(name: String!, aboutus: String!, description: String!, image: String!, shopID: ID!): Shop!
    updateShopStatus(banned: Boolean, shopID: ID!): Shop!

    createShopReview(shopID:ID!, userID:ID!, rating:Float!, tag:String, comment:String!, oneTimeDelivery:Boolean!, productAccurate:Boolean!, satisfiedService:Boolean!, transactionHeaderID: ID!): ShopReview!
} 

extend type Query{
    shops(banned:Boolean): [Shop!]! @goField(forceResolver: true)
    shop(id: ID, name: String): Shop! @goField(forceResolver: true)
    shopProducts(shopID: ID!, sortBy: String, limit: Int, offset: Int, categoryID:ID): [Product!]!
    shopOrders(shopID: ID!, filter:String): [TransactionHeader!]!
    shopTotalSales(shopID: ID!): Int!

    topShops: [Shop!]! @goField(forceResolver: true)

    shopReviews(shopID: ID!, filter: String, search: String): [ShopReview!]!

}