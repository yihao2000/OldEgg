package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"time"

	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/yihao2000/gqlgen-todos/config"
	"github.com/yihao2000/gqlgen-todos/graph/model"
	"github.com/yihao2000/gqlgen-todos/service"
)

// Login is the resolver for the login field.
func (r *authOpsResolver) Login(ctx context.Context, obj *model.AuthOps, email string, password string) (interface{}, error) {
	return service.UserLogin(ctx, email, password)
}

// Register is the resolver for the register field.
func (r *authOpsResolver) Register(ctx context.Context, obj *model.AuthOps, input model.NewUser) (interface{}, error) {
	return service.UserRegister(ctx, input)
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.AuthOps, error) {
	return &model.AuthOps{}, nil
}

// UserUpdateInformation is the resolver for the userUpdateInformation field.
func (r *mutationResolver) UserUpdateInformation(ctx context.Context, currentPassword *string, newPassword *string, phone *string) (*model.User, error) {
	return service.UserUpdateInformation(ctx, currentPassword, newPassword, phone)
}

// UserInputVerificationCode is the resolver for the userInputVerificationCode field.
func (r *mutationResolver) UserInputVerificationCode(ctx context.Context, email string, verificationcode string) (*model.User, error) {
	db := config.GetDB()

	var user model.User
	if err := db.Model(user).Where("email LIKE ?", email).Take(&user).Error; err != nil {
		return nil, err
	}

	user.VerificationCode = verificationcode
	validtime := time.Now().Add(time.Minute * 15)
	user.VerificationCodeValidTime = &validtime

	return &user, db.Save(user).Error
}

// ValidateUserVerificationCode is the resolver for the validateUserVerificationCode field.
func (r *mutationResolver) ValidateUserVerificationCode(ctx context.Context, email string, verificationcode string) (interface{}, error) {
	db := config.GetDB()

	var user model.User
	if err := db.Model(user).Where("email LIKE ?", email).Take(&user).Error; err != nil {
		return false, err
	}

	if user.VerificationCode == verificationcode {
		if time.Now().Before(*user.VerificationCodeValidTime) {
			token, err := service.JwtGenerate(ctx, user.ID)
			if err != nil {
				return nil, err
			}

			return map[string]interface{}{
				"token": token,
			}, nil
		} else {
			return false, &gqlerror.Error{
				Message: "Error, Verification Code Expired !",
			}
		}

	}

	return false, &gqlerror.Error{
		Message: "Error, Verification Code Ga Sama!",
	}
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id *string, email *string) (*model.User, error) {
	if id != nil {
		return service.UserGetByID(ctx, *id)

	} else {
		return service.UserGetByEmail(ctx, *email)
	}

	// return service.UserGetByEmail(ctx, *email)
}

// GetCurrentUser is the resolver for the getCurrentUser field.
func (r *queryResolver) GetCurrentUser(ctx context.Context) (*model.User, error) {
	return service.UserGetByToken(ctx)
}

// Protected is the resolver for the protected field.
func (r *queryResolver) Protected(ctx context.Context) (string, error) {
	return "Success" + fmt.Sprintf("%+v\n", ctx.Value("auth")), nil
}

// AuthOps returns AuthOpsResolver implementation.
func (r *Resolver) AuthOps() AuthOpsResolver { return &authOpsResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type authOpsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
