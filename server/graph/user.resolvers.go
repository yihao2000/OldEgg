package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/yihao2000/gqlgen-todos/config"
	"github.com/yihao2000/gqlgen-todos/graph/model"
	"github.com/yihao2000/gqlgen-todos/service"
)

// Login is the resolver for the login field.
func (r *authOpsResolver) Login(ctx context.Context, obj *model.AuthOps, email string, password string) (interface{}, error) {
	return service.UserLogin(ctx, email, password)
}

// Register is the resolver for the register field.
func (r *authOpsResolver) Register(ctx context.Context, obj *model.AuthOps, input model.NewUser) (interface{}, error) {
	return service.UserRegister(ctx, input)
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.AuthOps, error) {
	return &model.AuthOps{}, nil
}

// UserUpdateInformation is the resolver for the userUpdateInformation field.
func (r *mutationResolver) UserUpdateInformation(ctx context.Context, currentPassword *string, newPassword *string, phone *string, balance *float64, banned *bool) (*model.User, error) {
	return service.UserUpdateInformation(ctx, currentPassword, newPassword, phone, balance, banned)
}

// UserInputVerificationCode is the resolver for the userInputVerificationCode field.
func (r *mutationResolver) UserInputVerificationCode(ctx context.Context, email string, verificationcode string, duration int) (*model.User, error) {
	db := config.GetDB()

	var user model.User
	if err := db.Model(user).Where("email LIKE ?", email).Take(&user).Error; err != nil {
		return nil, err
	}

	if user.VerificationCodeValidTime != nil {
		duration := time.Since(*user.VerificationCodeValidTime)

		if duration.Minutes() < -13 {
			return nil, &gqlerror.Error{
				Message: duration.String(),
			}
		}
	}

	user.VerificationCode = verificationcode
	validtime := time.Now().Add(time.Minute * time.Duration(duration))
	user.VerificationCodeValidTime = &validtime

	return &user, db.Save(user).Error
}

// ValidateUserVerificationCode is the resolver for the validateUserVerificationCode field.
func (r *mutationResolver) ValidateUserVerificationCode(ctx context.Context, email string, verificationcode string) (interface{}, error) {
	db := config.GetDB()

	var user model.User
	if err := db.Model(user).Where("email LIKE ?", email).Take(&user).Error; err != nil {
		return false, err
	}

	if user.VerificationCode == verificationcode {
		if time.Now().Before(*user.VerificationCodeValidTime) {
			token, err := service.JwtGenerate(ctx, user.ID)
			if err != nil {
				return nil, err
			}

			return map[string]interface{}{
				"token": token,
			}, nil
		} else {
			return false, &gqlerror.Error{
				Message: "Error, Verification Code Expired !",
			}
		}

	}

	return false, &gqlerror.Error{
		Message: "Error, Verification Code Ga Sama!",
	}
}

// UpdateUserInformation is the resolver for the updateUserInformation field.
func (r *mutationResolver) UpdateUserInformation(ctx context.Context, userID string, banned *bool) (*model.User, error) {
	db := config.GetDB()

	var user model.User
	if err := db.Model(user).Where("id LIKE ?", userID).Take(&user).Error; err != nil {
		return nil, err
	}

	if banned != nil {
		user.Banned = *banned
	}

	return &user, db.Save(user).Error
}

// UserUpdateNewsLetterSubscription is the resolver for the userUpdateNewsLetterSubscription field.
func (r *mutationResolver) UserUpdateNewsLetterSubscription(ctx context.Context, userID string, subscribed bool) (*model.User, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	currUserID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	if currUserID != userID {
		return nil, &gqlerror.Error{
			Message: "Error, Beda User !",
		}
	}

	var user model.User
	if err := db.Model(user).Where("id LIKE ?", userID).Take(&user).Error; err != nil {
		return nil, err
	}
	user.NewsLetterSubscribe = subscribed

	return &user, db.Save(user).Error
}

// CreateUserSavedSearch is the resolver for the createUserSavedSearch field.
func (r *mutationResolver) CreateUserSavedSearch(ctx context.Context, keyword string) (*model.UserSavedSearch, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var models []*model.UserSavedSearch
	db.Where("user_id = ? ", userID).Find(&models)

	if len(models) >= 10 {
		return nil, &gqlerror.Error{
			Message: "Saved query reached limit !",
		}
	}

	savedSearch := model.UserSavedSearch{
		ID:      uuid.NewString(),
		Keyword: keyword,
		UserID:  userID,
	}

	return &savedSearch, db.Model(savedSearch).Create(&savedSearch).Error
}

// DeleteUserSavedSearch is the resolver for the deleteUserSavedSearch field.
func (r *mutationResolver) DeleteUserSavedSearch(ctx context.Context, keyword string) (bool, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return false, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	model := new(model.UserSavedSearch)
	if err := db.First(model, "user_id = ? AND keyword LIKE ?", userID, keyword).Error; err != nil {
		return false, err
	}

	return true, db.Delete(model).Error
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id *string, email *string) (*model.User, error) {
	if id != nil {
		return service.UserGetByID(ctx, *id)

	} else {
		return service.UserGetByEmail(ctx, *email)
	}

	// return service.UserGetByEmail(ctx, *email)
}

// GetCurrentUser is the resolver for the getCurrentUser field.
func (r *queryResolver) GetCurrentUser(ctx context.Context) (*model.User, error) {
	return service.UserGetByToken(ctx)
}

// GetSubscribedUsers is the resolver for the getSubscribedUsers field.
func (r *queryResolver) GetSubscribedUsers(ctx context.Context) ([]*model.User, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var user model.User
	if err := db.Model(user).Where("id LIKE ?", userID).Take(&user).Error; err != nil {
		return nil, err
	}

	if user.Role != "Admin" {
		return nil, &gqlerror.Error{
			Message: "You are not admin !",
		}
	}

	var users []*model.User

	temp := db.Where("users.role = 'User' AND users.news_letter_subscribe = ?", true)

	return users, temp.Find(&users).Error
}

// Protected is the resolver for the protected field.
func (r *queryResolver) Protected(ctx context.Context) (string, error) {
	return "Success" + fmt.Sprintf("%+v\n", ctx.Value("auth")), nil
}

// GetUserShop is the resolver for the getUserShop field.
func (r *queryResolver) GetUserShop(ctx context.Context) (*model.Shop, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, Invalid Token !",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var shop model.Shop
	if err := db.Model(shop).Where("user_id = ?", userID).Take(&shop).Error; err != nil {
		return nil, err
	}

	return &shop, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, limit *int, offset *int) ([]*model.User, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var users []*model.User

	temp := db.Where("id != ?", userID)

	if limit != nil {
		temp = temp.Limit(*limit)
	}

	if offset != nil {
		temp = temp.Offset(*offset)
	}

	return users, temp.Find(&users).Error
}

// NoShopUsers is the resolver for the noShopUsers field.
func (r *queryResolver) NoShopUsers(ctx context.Context) ([]*model.User, error) {
	db := config.GetDB()

	var users []*model.User

	temp := db.Where("users.id NOT IN (SELECT user_id FROM shops)")

	return users, temp.Find(&users).Error
}

// Locations is the resolver for the locations field.
func (r *queryResolver) Locations(ctx context.Context) ([]*model.Location, error) {
	db := config.GetDB()
	var models []*model.Location
	return models, db.Find(&models).Error
}

// GetUserLocation is the resolver for the getUserLocation field.
func (r *queryResolver) GetUserLocation(ctx context.Context) (*model.Location, error) {
	db := config.GetDB()

	user := new(model.User)
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	err := db.Where("id = ?", userID).Find(&user).Error

	if err != nil {
		return nil, err
	}
	model := new(model.Location)
	if &user.LocationID != nil {
		return model, db.First(model, "id = ?", user.LocationID).Error
	}

	return nil, &gqlerror.Error{
		Message: "User gapunya location",
	}
}

// UserSavedSearches is the resolver for the userSavedSearches field.
func (r *queryResolver) UserSavedSearches(ctx context.Context) ([]*model.UserSavedSearch, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var models []*model.UserSavedSearch
	return models, db.Where("user_id = ? ", userID).Find(&models).Error
}

// PopularSavedSearches is the resolver for the popularSavedSearches field.
func (r *queryResolver) PopularSavedSearches(ctx context.Context) ([]*model.PopularSavedSearch, error) {
	db := config.GetDB()

	var popularSearches []*model.PopularSavedSearch

	err := db.Table("user_saved_searches").
		Select("keyword, COUNT(*) AS count").
		Group("keyword").
		Order("count DESC").
		Limit(5).
		Scan(&popularSearches).Error

	if err != nil {
		return nil, &gqlerror.Error{
			Message: "Failed",
		}
	}

	return popularSearches, nil
}

// UserProductReviews is the resolver for the userProductReviews field.
func (r *queryResolver) UserProductReviews(ctx context.Context) ([]*model.ProductReview, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	var models []*model.ProductReview
	return models, db.Where("user_id = ? ", userID).Find(&models).Error
}

// UserWishlistReviews is the resolver for the userWishlistReviews field.
func (r *queryResolver) UserWishlistReviews(ctx context.Context) ([]*model.WishlistReview, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	var models []*model.WishlistReview
	return models, db.Where("user_id = ? ", userID).Find(&models).Error
}

// Location is the resolver for the location field.
func (r *userResolver) Location(ctx context.Context, obj *model.User) (*model.Location, error) {
	db := config.GetDB()
	model := new(model.Location)

	return model, db.First(model, "id = ?", obj.LocationID).Error
}

// UserSavedSearches is the resolver for the userSavedSearches field.
func (r *userResolver) UserSavedSearches(ctx context.Context, obj *model.User) ([]*model.UserSavedSearch, error) {
	db := config.GetDB()
	var models []*model.UserSavedSearch
	return models, db.Where("user_id = ? ", obj.ID).Find(&models).Error
}

// AuthOps returns AuthOpsResolver implementation.
func (r *Resolver) AuthOps() AuthOpsResolver { return &authOpsResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type authOpsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) GetSubscribedUser(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: GetSubscribedUser - getSubscribedUser"))
}
