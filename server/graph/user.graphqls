directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

scalar Any

directive @auth on FIELD_DEFINITION

type User{
  id: ID!
  name: String!
  email: String!
  phone: String
  password: String!
  banned: Boolean!
  role: String!
  verificationcode: String
  verificationcodevalidtime: Time
  newslettersubscribe: Boolean!
  currency: Float!
}




 input NewUser{
  name: String!
  email: String!
  phone: String
  password: String!
  banned: Boolean!
  role: String!
  newslettersubscribe: Boolean!
}






type AuthOps{
  login(email: String!, password: String!): Any! @goField(forceResolver: true)
  register(input: NewUser!): Any! @goField(forceResolver: true)
  
}

type Mutation {
   auth: AuthOps! @goField(forceResolver: true)
   userUpdateInformation(currentPassword: String, newPassword: String, phone: String, balance: Float): User! @goField(forceResolver: true)

   userInputVerificationCode(email:String!, verificationcode:String!): User! @goField(forceResolver:true)
   validateUserVerificationCode(email: String!, verificationcode:String!): Any! @goField(forceResolver:true)

   
}


type Query{
    user(id: ID, email: String): User! @goField(forceResolver: true)
    getCurrentUser: User! @goField(forceResolver: true) @auth
    # getUserReviews: [Review]

    protected: String! @goField(forceResolver: true) @auth
    getUserShop: Shop! @goField(forceResolver: true) @auth



}