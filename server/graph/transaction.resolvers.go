package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"os"
	"time"

	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/yihao2000/gqlgen-todos/config"
	"github.com/yihao2000/gqlgen-todos/graph/model"
	"github.com/yihao2000/gqlgen-todos/service"
)

// Checkout is the resolver for the checkout field.
func (r *mutationResolver) Checkout(ctx context.Context, shippingID string, paymentTypeID string, addressID string) (*model.TransactionHeader, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var carts []*model.Cart
	err := db.Where("user_id = ?", userID).Find(&carts).Error
	if err != nil || carts == nil {
		return nil, &gqlerror.Error{
			Message: "Error, cart gaada",
		}
	}

	var validTo string
	if os.Getenv("MIN_DATE") != "" {
		validTo = os.Getenv("MIN_DATE")
	} else {
		validTo = "9999-12-31 23:59:59.999999"
	}

	for _, c := range carts {
		product := new(model.Product)
		if err := db.First(product, "id = ? AND (valid_to IS NULL OR valid_to = '"+validTo+"')", c.ProductID).Error; err != nil {
			return nil, err
		}

		if c.Quantity > product.Quantity {
			return nil, &gqlerror.Error{
				Message: "Error, Stock Gacukup !",
			}
		}

	}

	header := &model.TransactionHeader{
		ID:              uuid.NewString(),
		TransactionDate: time.Now(),
		UserID:          userID,
		ShippingID:      shippingID,
		PaymentTypeID:   paymentTypeID,
		Status:          "Success",
		AddressID:       addressID,
	}

	err = db.Create(header).Error

	if err != nil {
		return header, &gqlerror.Error{
			Message: "Error, create header",
		}
	}

	for _, c := range carts {
		detail := &model.TransactionDetail{
			TransactionHeaderID: header.ID,
			ProductID:           c.ProductID,
			Quantity:            c.Quantity,
		}

		product := new(model.Product)
		if err := db.First(product, "id = ? AND (valid_to IS NULL OR valid_to = '"+validTo+"')", c.ProductID).Error; err != nil {
			return nil, err
		}

		product.Quantity -= c.Quantity

		if err := db.Save(product).Error; err != nil {
			return nil, err
		}
		err = db.Create(detail).Error
		if err != nil {
			return header, &gqlerror.Error{
				Message: "Error, create detail",
			}
		}

		err = db.Delete(c).Error
		if err != nil {
			return header, &gqlerror.Error{
				Message: "Error, delete cart",
			}
		}
	}

	return header, nil
}

// Shipping is the resolver for the shipping field.
func (r *queryResolver) Shipping(ctx context.Context, id string) (*model.Shipping, error) {
	panic(fmt.Errorf("not implemented: Shipping - shipping"))
}

// Shippings is the resolver for the shippings field.
func (r *queryResolver) Shippings(ctx context.Context) ([]*model.Shipping, error) {
	db := config.GetDB()
	var models []*model.Shipping
	return models, db.Find(&models).Error
}

// PaymentType is the resolver for the paymentType field.
func (r *queryResolver) PaymentType(ctx context.Context, id string) (*model.PaymentType, error) {
	panic(fmt.Errorf("not implemented: PaymentType - paymentType"))
}

// PaymentTypes is the resolver for the paymentTypes field.
func (r *queryResolver) PaymentTypes(ctx context.Context) ([]*model.PaymentType, error) {
	db := config.GetDB()
	var models []*model.PaymentType
	return models, db.Find(&models).Error
}

// TransactionHeaders is the resolver for the transactionHeaders field.
func (r *queryResolver) TransactionHeaders(ctx context.Context) ([]*model.TransactionHeader, error) {
	panic(fmt.Errorf("not implemented: TransactionHeaders - transactionHeaders"))
}

// TransactionHeader is the resolver for the transactionHeader field.
func (r *transactionDetailResolver) TransactionHeader(ctx context.Context, obj *model.TransactionDetail) (*model.TransactionHeader, error) {
	panic(fmt.Errorf("not implemented: TransactionHeader - transactionHeader"))
}

// Product is the resolver for the product field.
func (r *transactionDetailResolver) Product(ctx context.Context, obj *model.TransactionDetail) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// User is the resolver for the user field.
func (r *transactionHeaderResolver) User(ctx context.Context, obj *model.TransactionHeader) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Shipping is the resolver for the shipping field.
func (r *transactionHeaderResolver) Shipping(ctx context.Context, obj *model.TransactionHeader) (*model.Shipping, error) {
	panic(fmt.Errorf("not implemented: Shipping - shipping"))
}

// PaymentType is the resolver for the paymentType field.
func (r *transactionHeaderResolver) PaymentType(ctx context.Context, obj *model.TransactionHeader) (*model.PaymentType, error) {
	panic(fmt.Errorf("not implemented: PaymentType - paymentType"))
}

// Address is the resolver for the address field.
func (r *transactionHeaderResolver) Address(ctx context.Context, obj *model.TransactionHeader) (*model.Address, error) {
	panic(fmt.Errorf("not implemented: Address - address"))
}

// TransactionDetails is the resolver for the transactionDetails field.
func (r *transactionHeaderResolver) TransactionDetails(ctx context.Context, obj *model.TransactionHeader) ([]*model.TransactionDetail, error) {
	panic(fmt.Errorf("not implemented: TransactionDetails - transactionDetails"))
}

// TransactionDetail returns TransactionDetailResolver implementation.
func (r *Resolver) TransactionDetail() TransactionDetailResolver {
	return &transactionDetailResolver{r}
}

// TransactionHeader returns TransactionHeaderResolver implementation.
func (r *Resolver) TransactionHeader() TransactionHeaderResolver {
	return &transactionHeaderResolver{r}
}

type transactionDetailResolver struct{ *Resolver }
type transactionHeaderResolver struct{ *Resolver }
