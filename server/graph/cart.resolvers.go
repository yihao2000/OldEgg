package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"time"

	"github.com/yihao2000/gqlgen-todos/graph/model"
)

// User is the resolver for the user field.
func (r *cartResolver) User(ctx context.Context, obj *model.Cart) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Product is the resolver for the product field.
func (r *cartResolver) Product(ctx context.Context, obj *model.Cart) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// CreateCart is the resolver for the createCart field.
func (r *mutationResolver) CreateCart(ctx context.Context, productID string, quantity int) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: CreateCart - createCart"))
}

// UpdateCart is the resolver for the updateCart field.
func (r *mutationResolver) UpdateCart(ctx context.Context, productID string, quantity int) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: UpdateCart - updateCart"))
}

// DeleteCart is the resolver for the deleteCart field.
func (r *mutationResolver) DeleteCart(ctx context.Context, productID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCart - deleteCart"))
}

// CreateWishlist is the resolver for the createWishlist field.
func (r *mutationResolver) CreateWishlist(ctx context.Context, wishlistID string) (*model.Wishlist, error) {
	panic(fmt.Errorf("not implemented: CreateWishlist - createWishlist"))
}

// UpdataeWishlist is the resolver for the updataeWishlist field.
func (r *mutationResolver) UpdataeWishlist(ctx context.Context, wishlistID string, name *string, privacy *string) (*model.Wishlist, error) {
	panic(fmt.Errorf("not implemented: UpdataeWishlist - updataeWishlist"))
}

// DeleteWishlist is the resolver for the deleteWishlist field.
func (r *mutationResolver) DeleteWishlist(ctx context.Context, wishlistID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteWishlist - deleteWishlist"))
}

// Cart is the resolver for the cart field.
func (r *queryResolver) Cart(ctx context.Context, productID string) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: Cart - cart"))
}

// Carts is the resolver for the carts field.
func (r *queryResolver) Carts(ctx context.Context) ([]*model.Cart, error) {
	panic(fmt.Errorf("not implemented: Carts - carts"))
}

// Wishlists is the resolver for the wishlists field.
func (r *queryResolver) Wishlists(ctx context.Context) ([]*model.Wishlist, error) {
	panic(fmt.Errorf("not implemented: Wishlists - wishlists"))
}

// ID is the resolver for the id field.
func (r *wishlistResolver) ID(ctx context.Context, obj *model.Wishlist) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Name is the resolver for the name field.
func (r *wishlistResolver) Name(ctx context.Context, obj *model.Wishlist) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// User is the resolver for the user field.
func (r *wishlistResolver) User(ctx context.Context, obj *model.Wishlist) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Privacy is the resolver for the privacy field.
func (r *wishlistResolver) Privacy(ctx context.Context, obj *model.Wishlist) (string, error) {
	panic(fmt.Errorf("not implemented: Privacy - privacy"))
}

// DateCreated is the resolver for the dateCreated field.
func (r *wishlistResolver) DateCreated(ctx context.Context, obj *model.Wishlist) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DateCreated - dateCreated"))
}

// Cart returns CartResolver implementation.
func (r *Resolver) Cart() CartResolver { return &cartResolver{r} }

// Wishlist returns WishlistResolver implementation.
func (r *Resolver) Wishlist() WishlistResolver { return &wishlistResolver{r} }

type cartResolver struct{ *Resolver }
type wishlistResolver struct{ *Resolver }
