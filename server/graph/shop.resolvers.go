package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/yihao2000/gqlgen-todos/config"
	"github.com/yihao2000/gqlgen-todos/graph/model"
)

// CreateShop is the resolver for the createShop field.
func (r *mutationResolver) CreateShop(ctx context.Context, input model.NewShop) (*model.Shop, error) {
	db := config.GetDB()

	// if ctx.Value("Role") == nil {
	// 	return nil, nil
	// }

	var shop model.Shop
	if err := db.Model(shop).Where("name LIKE ?", input.Name).Take(&shop).Error; err == nil {
		return nil, err
	} else {

		shop := model.Shop{
			ID:          uuid.New().String(),
			Name:        input.Name,
			Description: input.Description,
			Image:       input.Image,
			Aboutus:     input.Aboutus,
			Banner:      input.Banner,
			Banned:      false,
			UserID:      input.UserID,
		}
		if err := db.Model(shop).Create(&shop).Error; err != nil {
			return nil, err
		}

		return &shop, nil
	}
}

// UpdateShop is the resolver for the updateShop field.
func (r *mutationResolver) UpdateShop(ctx context.Context, name string, aboutus string, description string, image string, shopID string) (*model.Shop, error) {
	db := config.GetDB()

	shop := new(model.Shop)

	err := db.First(shop, "id = ?", shopID).Error
	if err != nil {
		return nil, err
	}

	shop.Name = name
	shop.Aboutus = aboutus
	shop.Description = description
	shop.Image = image

	db.Save(shop)

	return shop, nil
}

// Shops is the resolver for the shops field.
func (r *queryResolver) Shops(ctx context.Context) ([]*model.Shop, error) {
	panic(fmt.Errorf("not implemented: Shops - shops"))
}

// Shop is the resolver for the shop field.
func (r *queryResolver) Shop(ctx context.Context, id *string, name *string) (*model.Shop, error) {
	db := config.GetDB()

	shop := new(model.Shop)

	return shop, db.Where("id = ?", id).Limit(1).Find(&shop).Error
}

// ShopProducts is the resolver for the shopProducts field.
func (r *queryResolver) ShopProducts(ctx context.Context, shopID string, sortBy *string, limit *int, offset *int, categoryID *string) ([]*model.Product, error) {
	db := config.GetDB()
	var models []*model.Product

	temp := db.Model(models).Where("shop_id = ?", shopID)

	if sortBy != nil {
		if *sortBy == "topsold" {
			temp = db.Model(models).
				Select("products.id, products.productgroup_id, products.brand_id, products.category_id, products.shop_id, products.name, products.description, products.price, products.image, products.quantity, products.valid_to, products.discount, SUM(transaction_details.quantity) as total_quantity").
				Joins("LEFT JOIN transaction_details ON products.id = transaction_details.product_id").
				Where("products.valid_to IS NULL AND shop_id = ?", shopID).
				Group("products.id").
				Order("total_quantity DESC")
		} else if *sortBy == "toprating" {
			temp = temp.Order("rating DESC")
		} else if *sortBy == "lowestprice" {
			temp = temp.Order("price ASC")
		} else if *sortBy == "highestprice" {
			temp = temp.Order("price DESC")
		} else if *sortBy == "mostreviews" {

		}
	}

	if categoryID != nil {
		temp = temp.Where("category_id = ?", categoryID)
	}

	if limit != nil {
		temp = temp.Limit(*limit)
	}

	if offset != nil {
		temp = temp.Offset(*offset)
	}

	return models, temp.Find(&models).Error
}

// ShopTotalSales is the resolver for the shopTotalSales field.
func (r *queryResolver) ShopTotalSales(ctx context.Context, shopID string) (int, error) {
	db := config.GetDB()
	var total int

	if err := db.Raw("SELECT COUNT(th.id) FROM products p JOIN transaction_details td ON p.id = td.product_id JOIN transaction_headers th ON th.id = td.transaction_header_id JOIN shops s ON s.id = p.shop_id WHERE s.id = ?", shopID).Find(&total).Error; err != nil {
		return 0, err
	}

	return total, nil
}

// Products is the resolver for the products field.
func (r *shopResolver) Products(ctx context.Context, obj *model.Shop) ([]*model.Product, error) {
	db := config.GetDB()
	var models []*model.Product
	return models, db.Where("shop_id = ?", obj.ID).Find(&models).Error
}

// User is the resolver for the user field.
func (r *shopResolver) User(ctx context.Context, obj *model.Shop) (*model.User, error) {
	db := config.GetDB()
	var model *model.User
	return model, db.Where("id = ?", obj.UserID).Find(&model).Error
}

// Shop returns ShopResolver implementation.
func (r *Resolver) Shop() ShopResolver { return &shopResolver{r} }

type shopResolver struct{ *Resolver }
