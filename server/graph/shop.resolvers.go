package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/yihao2000/gqlgen-todos/config"
	"github.com/yihao2000/gqlgen-todos/graph/model"
	"github.com/yihao2000/gqlgen-todos/service"
)

// CreateShop is the resolver for the createShop field.
func (r *mutationResolver) CreateShop(ctx context.Context, input model.NewShop) (*model.Shop, error) {
	db := config.GetDB()

	// if ctx.Value("Role") == nil {
	// 	return nil, nil
	// }

	var shop model.Shop
	if err := db.Model(shop).Where("name LIKE ?", input.Name).Take(&shop).Error; err == nil {
		return nil, err
	} else {

		shop := model.Shop{
			ID:          uuid.New().String(),
			Name:        input.Name,
			Description: input.Description,
			Image:       input.Image,
			Aboutus:     input.Aboutus,
			Banner:      input.Banner,
			Banned:      false,
			UserID:      input.UserID,
		}
		if err := db.Model(shop).Create(&shop).Error; err != nil {
			return nil, err
		}

		return &shop, nil
	}
}

// UpdateShop is the resolver for the updateShop field.
func (r *mutationResolver) UpdateShop(ctx context.Context, name string, aboutus string, description string, image string, shopID string) (*model.Shop, error) {
	db := config.GetDB()

	shop := new(model.Shop)

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	err := db.First(shop, "id = ? AND user_id = ?", shopID, userID).Error
	if err != nil {
		return nil, err
	}

	shop.Name = name
	shop.Aboutus = aboutus
	shop.Description = description
	shop.Image = image

	db.Save(shop)

	return shop, nil
}

// UpdateShopStatus is the resolver for the updateShopStatus field.
func (r *mutationResolver) UpdateShopStatus(ctx context.Context, banned *bool, shopID string) (*model.Shop, error) {
	db := config.GetDB()

	shop := new(model.Shop)

	err := db.First(shop, "id = ?", shopID).Error
	if err != nil {
		return nil, err
	}

	if banned != nil {
		shop.Banned = *banned
	}

	db.Save(shop)

	return shop, nil
}

// CreateShopReview is the resolver for the createShopReview field.
func (r *mutationResolver) CreateShopReview(ctx context.Context, shopID string, userID string, rating float64, tag *string, comment string, oneTimeDelivery bool, productAccurate bool, satisfiedService bool, transactionHeaderID string) (*model.ShopReview, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, Invalid Token !",
		}
	}

	shopReview := model.ShopReview{
		ID:                  uuid.NewString(),
		ShopID:              shopID,
		UserID:              userID,
		Rating:              rating,
		Tag:                 tag,
		TransactionHeaderID: transactionHeaderID,
		DateCreated:         time.Now(),
		Comment:             comment,
		OnTimeDelivery:      oneTimeDelivery,
		ProductAccurate:     productAccurate,
		SatisfiedService:    satisfiedService,
	}
	if err := db.Model(shopReview).Create(&shopReview).Error; err != nil {
		return nil, err
	}

	return &shopReview, nil
}

// UpdateShopReview is the resolver for the updateShopReview field.
func (r *mutationResolver) UpdateShopReview(ctx context.Context, shopReviewID string, rating float64, comment string) (*model.ShopReview, error) {
	db := config.GetDB()

	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}
	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	shopReview := new(model.ShopReview)

	err := db.First(shopReview, "id = ? AND user_id = ?", shopReviewID, userID).Error
	if err != nil {
		return nil, err
	}

	shopReview.Comment = comment
	shopReview.Rating = rating

	db.Save(shopReview)

	return shopReview, nil
}

// DeleteShopReview is the resolver for the deleteShopReview field.
func (r *mutationResolver) DeleteShopReview(ctx context.Context, shopReviewID string) (bool, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return false, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	model := new(model.ShopReview)
	if err := db.First(model, "id = ? AND user_id = ?", shopReviewID, userID).Error; err != nil {
		return false, err
	}

	return true, db.Delete(model).Error
}

// CreateShopReviewTag is the resolver for the createShopReviewTag field.
func (r *mutationResolver) CreateShopReviewTag(ctx context.Context, shopReviewID string, tag string) (*model.ShopReviewTag, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, Invalid Token !",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	shopReviewTag := model.ShopReviewTag{
		ShopReviewID: shopReviewID,
		UserID:       userID,
		Tag:          tag,
	}
	if err := db.Model(shopReviewTag).Create(&shopReviewTag).Error; err != nil {
		return nil, err
	}

	return &shopReviewTag, nil
}

// DeleteShopReviewTag is the resolver for the deleteShopReviewTag field.
func (r *mutationResolver) DeleteShopReviewTag(ctx context.Context, shopReviewID string) (bool, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return false, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	// userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var models []*model.ShopReviewTag
	if err := db.Where("shop_review_id = ?", shopReviewID).Find(&models).Error; err != nil {
		return false, err
	}

	return true, db.Delete(&models).Error
}

// Shops is the resolver for the shops field.
func (r *queryResolver) Shops(ctx context.Context, banned *bool) ([]*model.Shop, error) {
	db := config.GetDB()

	var models []*model.Shop

	temp := db.Model(models)

	if banned != nil {
		temp = temp.Where("banned = ?", banned)
	}

	return models, temp.Find(&models).Error
}

// Shop is the resolver for the shop field.
func (r *queryResolver) Shop(ctx context.Context, id *string, name *string) (*model.Shop, error) {
	db := config.GetDB()

	shop := new(model.Shop)

	return shop, db.Where("id = ?", id).Limit(1).Find(&shop).Error
}

// ShopProducts is the resolver for the shopProducts field.
func (r *queryResolver) ShopProducts(ctx context.Context, shopID string, sortBy *string, limit *int, offset *int, categoryID *string) ([]*model.Product, error) {
	db := config.GetDB()
	var models []*model.Product

	temp := db.Model(models).Where("shop_id = ?", shopID)

	if sortBy != nil {
		if *sortBy == "topsold" {
			temp = db.Model(models).
				Select("products.id, products.productgroup_id, products.brand_id, products.category_id, products.shop_id, products.name, products.description, products.price, products.image, products.quantity, products.valid_to, products.discount, SUM(transaction_details.quantity) as total_quantity").
				Joins("LEFT JOIN transaction_details ON products.id = transaction_details.product_id").
				Where("products.valid_to IS NULL AND shop_id = ?", shopID).
				Group("products.id").
				Order("total_quantity DESC")
		} else if *sortBy == "toprating" {
			temp = temp.Order("rating DESC")
		} else if *sortBy == "lowestprice" {
			temp = temp.Order("price ASC")
		} else if *sortBy == "highestprice" {
			temp = temp.Order("price DESC")
		} else if *sortBy == "mostreviews" {

		}
	}

	if categoryID != nil {
		temp = temp.Where("category_id = ?", categoryID)
	}

	if limit != nil {
		temp = temp.Limit(*limit)
	}

	if offset != nil {
		temp = temp.Offset(*offset)
	}

	return models, temp.Find(&models).Error
}

// ShopOrders is the resolver for the shopOrders field.
func (r *queryResolver) ShopOrders(ctx context.Context, shopID string, filter *string) ([]*model.TransactionHeader, error) {
	db := config.GetDB()
	var models []*model.TransactionHeader

	temp := db.Model(models).Joins("JOIN transaction_details ON transaction_headers.id = transaction_details.transaction_header_id JOIN products ON products.id = transaction_details.product_id").Where("products.shop_id = ?", shopID)

	if filter != nil && *filter != "All" {

		temp = temp.Where("transaction_headers.status = ?", filter)

		// 	if *filter == "30days" {
		// 		startDate := time.Now().AddDate(0, 0, -30).Format("2006-01-02")
		// 		temp = temp.Where("date_created >= ?", startDate)
		// 	} else if *filter == "60days" {
		// 		startDate := time.Now().AddDate(0, 0, -60).Format("2006-01-02")
		// 		temp = temp.Where("date_created >= ?", startDate)
		// 	} else if *filter == "12months" {
		// 		startDate := time.Now().AddDate(0, 0, -365).Format("2006-01-02")
		// 		temp = temp.Where("date_created >= ?", startDate)
		// 	}
	}

	return models, temp.Find(&models).Error
}

// ShopTotalSales is the resolver for the shopTotalSales field.
func (r *queryResolver) ShopTotalSales(ctx context.Context, shopID string) (int, error) {
	db := config.GetDB()
	var total int

	if err := db.Raw("SELECT COUNT(th.id) FROM products p JOIN transaction_details td ON p.id = td.product_id JOIN transaction_headers th ON th.id = td.transaction_header_id JOIN shops s ON s.id = p.shop_id WHERE s.id = ?", shopID).Find(&total).Error; err != nil {
		return 0, err
	}

	return total, nil
}

// TopShops is the resolver for the topShops field.
func (r *queryResolver) TopShops(ctx context.Context) ([]*model.Shop, error) {
	db := config.GetDB()

	var models []*model.Shop

	temp := db.Model(models)
	temp = temp.Select("shops.id, shops.name, shops.description, shops.image, shops.aboutus, shops.banner, shops.banned, shops.user_id, COUNT(transaction_headers.id) as total_transactions").Joins("JOIN products ON shops.id = products.shop_id JOIN transaction_details ON transaction_details.product_id = products.id JOIN transaction_headers ON transaction_headers.id = transaction_details.transaction_header_id").Where("shops.banned = false").Group("shops.id").Order("total_transactions DESC").Limit(3)

	return models, temp.Find(&models).Error
}

// ShopReviews is the resolver for the shopReviews field.
func (r *queryResolver) ShopReviews(ctx context.Context, shopID string, filter *string, search *string) ([]*model.ShopReview, error) {
	db := config.GetDB()
	var models []*model.ShopReview

	temp := db.Model(models).Where("shop_id = ?", shopID)

	if search != nil {
		temp = temp.Where("comment LIKE ?", "%"+*search+"%")
	}

	if filter != nil {
		if *filter == "30days" {
			startDate := time.Now().AddDate(0, 0, -30).Format("2006-01-02")
			temp = temp.Where("date_created >= ?", startDate)
		} else if *filter == "60days" {
			startDate := time.Now().AddDate(0, 0, -60).Format("2006-01-02")
			temp = temp.Where("date_created >= ?", startDate)
		} else if *filter == "12months" {
			startDate := time.Now().AddDate(0, 0, -365).Format("2006-01-02")
			temp = temp.Where("date_created >= ?", startDate)
		}
	}

	return models, temp.Find(&models).Error
}

// ShopReviewTag is the resolver for the shopReviewTag field.
func (r *queryResolver) ShopReviewTag(ctx context.Context, shopReviewID string) (*model.ShopReviewTag, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, Invalid Token !",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID
	var model *model.ShopReviewTag
	err := db.Where("shop_review_id = ? AND user_id = ?", shopReviewID, userID).Find(&model).Error

	if err != nil || model == nil {
		return nil, err
	}
	return model, nil
}

// ShopOnGoingUserOrders is the resolver for the shopOnGoingUserOrders field.
func (r *queryResolver) ShopOnGoingUserOrders(ctx context.Context, shopID string) ([]*model.TransactionHeader, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	var models []*model.TransactionHeader

	temp := db.Model(models)
	temp = temp.Select("transaction_headers.id, transaction_headers.transaction_date, transaction_headers.user_id, transaction_headers.shipping_id, transaction_headers.payment_type_id, transaction_headers.status, transaction_headers.address_id, transaction_headers.invoice").Joins("JOIN transaction_details ON transaction_headers.id = transaction_details.transaction_header_id JOIN products ON transaction_details.product_id = products.id JOIN shops ON shops.id = products.shop_id ").Where("transaction_headers.status = ? AND transaction_headers.user_id = ? AND shops.id = ?", "Open", userID, shopID)

	return models, temp.Find(&models).Error
}

// ShopOngoingOrderUsers is the resolver for the shopOngoingOrderUsers field.
func (r *queryResolver) ShopOngoingOrderUsers(ctx context.Context) ([]*model.User, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	// var model *model.Shop
	// err := db.Where("user_id = ?", userID).Find(&model).Error

	// if err != nil {
	// 	return nil, &gqlerror.Error{
	// 		Message: "User does not have any shop !",
	// 	}
	// }

	var models []*model.User

	temp := db.Model(models)
	temp = temp.Select("DISTINCT users.id, users.name, users.email, users.phone,  users.banned, users.role").Joins("JOIN transaction_headers ON transaction_headers.user_id = users.id JOIN transaction_details ON transaction_details.transaction_header_id = transaction_headers.id JOIN products ON products.id = transaction_details.product_id JOIN shops ON shops.id = products.shop_id").Where("transaction_headers.status = ? AND shops.user_id = ?", "Open", userID)

	return models, temp.Find(&models).Error
}

// Products is the resolver for the products field.
func (r *shopResolver) Products(ctx context.Context, obj *model.Shop) ([]*model.Product, error) {
	db := config.GetDB()
	var models []*model.Product
	return models, db.Where("shop_id = ?", obj.ID).Find(&models).Error
}

// User is the resolver for the user field.
func (r *shopResolver) User(ctx context.Context, obj *model.Shop) (*model.User, error) {
	db := config.GetDB()
	var model *model.User
	return model, db.Where("id = ?", obj.UserID).Find(&model).Error
}

// Shop is the resolver for the shop field.
func (r *shopReviewResolver) Shop(ctx context.Context, obj *model.ShopReview) (*model.Shop, error) {
	db := config.GetDB()
	var model *model.Shop
	return model, db.Where("id = ?", obj.ShopID).Find(&model).Error
}

// User is the resolver for the user field.
func (r *shopReviewResolver) User(ctx context.Context, obj *model.ShopReview) (*model.User, error) {
	db := config.GetDB()
	var model *model.User
	return model, db.Where("id = ?", obj.UserID).Find(&model).Error
}

// TransactionHeader is the resolver for the transactionHeader field.
func (r *shopReviewResolver) TransactionHeader(ctx context.Context, obj *model.ShopReview) (*model.TransactionHeader, error) {
	db := config.GetDB()
	var model *model.TransactionHeader
	return model, db.Where("id = ?", obj.TransactionHeaderID).Find(&model).Error
}

// Shop returns ShopResolver implementation.
func (r *Resolver) Shop() ShopResolver { return &shopResolver{r} }

// ShopReview returns ShopReviewResolver implementation.
func (r *Resolver) ShopReview() ShopReviewResolver { return &shopReviewResolver{r} }

type shopResolver struct{ *Resolver }
type shopReviewResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *shopReviewTagResolver) Tag(ctx context.Context, obj *model.ShopReviewTag) (string, error) {
	panic(fmt.Errorf("not implemented: Tag - tag"))
}

type shopReviewTagResolver struct{ *Resolver }
