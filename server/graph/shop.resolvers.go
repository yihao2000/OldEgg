package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/yihao2000/gqlgen-todos/config"
	"github.com/yihao2000/gqlgen-todos/graph/model"
)

// CreateShop is the resolver for the createShop field.
func (r *mutationResolver) CreateShop(ctx context.Context, input model.NewShop) (*model.Shop, error) {
	db := config.GetDB()

	// if ctx.Value("Role") == nil {
	// 	return nil, nil
	// }

	var shop model.Shop
	if err := db.Model(shop).Where("name LIKE ?", input.Name).Take(&shop).Error; err == nil {
		return nil, err
	} else {
		shop := model.Shop{
			ID:          uuid.New().String(),
			Name:        input.Name,
			Description: input.Description,
			Image:       input.Image,
			Aboutus:     input.Aboutus,
		}
		if err := db.Model(shop).Create(&shop).Error; err != nil {
			return nil, err
		}

		return &shop, nil
	}
}

// UpdateShop is the resolver for the updateShop field.
func (r *mutationResolver) UpdateShop(ctx context.Context, input model.NewShop) (*model.Shop, error) {
	panic(fmt.Errorf("not implemented: UpdateShop - updateShop"))
}

// Shops is the resolver for the shops field.
func (r *queryResolver) Shops(ctx context.Context) ([]*model.Shop, error) {
	panic(fmt.Errorf("not implemented: Shops - shops"))
}

// Shop is the resolver for the shop field.
func (r *queryResolver) Shop(ctx context.Context, id *string, name *string) (*model.Shop, error) {
	panic(fmt.Errorf("not implemented: Shop - shop"))
}
