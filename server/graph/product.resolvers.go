package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/yihao2000/gqlgen-todos/graph/model"
)

// CreateBrand is the resolver for the createBrand field.
func (r *mutationResolver) CreateBrand(ctx context.Context, input model.NewBrand) (*model.Brand, error) {
	panic(fmt.Errorf("not implemented: CreateBrand - createBrand"))
}

// UpdateBrand is the resolver for the updateBrand field.
func (r *mutationResolver) UpdateBrand(ctx context.Context, input model.NewBrand) (*model.Brand, error) {
	panic(fmt.Errorf("not implemented: UpdateBrand - updateBrand"))
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: CreateCategory - createCategory"))
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: UpdateCategory - updateCategory"))
}

// CreateProductGroup is the resolver for the createProductGroup field.
func (r *mutationResolver) CreateProductGroup(ctx context.Context) (*model.ProductGroup, error) {
	panic(fmt.Errorf("not implemented: CreateProductGroup - createProductGroup"))
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
}

// CreateProductVariant is the resolver for the createProductVariant field.
func (r *mutationResolver) CreateProductVariant(ctx context.Context, input model.NewProductVariant) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: CreateProductVariant - createProductVariant"))
}

// UpdateProductVariant is the resolver for the updateProductVariant field.
func (r *mutationResolver) UpdateProductVariant(ctx context.Context, input model.NewProductVariant) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProductVariant - updateProductVariant"))
}

// Brands is the resolver for the brands field.
func (r *queryResolver) Brands(ctx context.Context) ([]*model.Brand, error) {
	panic(fmt.Errorf("not implemented: Brands - brands"))
}

// Brand is the resolver for the brand field.
func (r *queryResolver) Brand(ctx context.Context, id *string, name *string) (*model.Brand, error) {
	panic(fmt.Errorf("not implemented: Brand - brand"))
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	panic(fmt.Errorf("not implemented: Categories - categories"))
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id *string, name *string) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id *string, name *string) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// ProductsGroup is the resolver for the productsGroup field.
func (r *queryResolver) ProductsGroup(ctx context.Context, category *string, brand *string, productgroup *string, shop *string) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: ProductsGroup - productsGroup"))
}
