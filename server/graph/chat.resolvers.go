package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/yihao2000/gqlgen-todos/config"
	"github.com/yihao2000/gqlgen-todos/graph/model"
	"github.com/yihao2000/gqlgen-todos/service"
)

// CreateUserChat is the resolver for the createUserChat field.
func (r *mutationResolver) CreateUserChat(ctx context.Context, sellerID string, userID string) (*model.UserChat, error) {
	db := config.GetDB()

	userChat := model.UserChat{
		ID:       uuid.NewString(),
		SellerID: sellerID,
		UserID:   userID,
		Time:     time.Now(),
	}
	if err := db.Model(userChat).Create(&userChat).Error; err != nil {
		return nil, err
	}

	return &userChat, nil
	// panic(fmt.Errorf("not implemented: CreateUserChatImage - createUserChatImage"))
}

// CreateUserChatImage is the resolver for the createUserChatImage field.
func (r *mutationResolver) CreateUserChatImage(ctx context.Context, chatID string, image string, typeArg string) (*model.UserChatImage, error) {
	panic(fmt.Errorf("not implemented: CreateUserChatImage - createUserChatImage"))
}

// CreateUserChatMessage is the resolver for the createUserChatMessage field.
func (r *mutationResolver) CreateUserChatMessage(ctx context.Context, chatID string, message string, typeArg string) (*model.UserChatMessage, error) {
	panic(fmt.Errorf("not implemented: CreateUserChatMessage - createUserChatMessage"))
}

// UserChat is the resolver for the userChat field.
func (r *queryResolver) UserChat(ctx context.Context, sellerID string) (*model.UserChat, error) {
	db := config.GetDB()
	if ctx.Value("auth") == nil {
		return nil, &gqlerror.Error{
			Message: "Error, token gaada",
		}
	}

	userID := ctx.Value("auth").(*service.JwtCustomClaim).ID

	userChat := new(model.UserChat)

	return userChat, db.Joins("JOIN users ON users.id = user_chats.user_id").Where("user_chats.seller_id = ? AND user_chats.user_id = ?", sellerID, userID).Find(&userChat).Error
}

// Seller is the resolver for the seller field.
func (r *userChatResolver) Seller(ctx context.Context, obj *model.UserChat) (*model.User, error) {
	db := config.GetDB()
	user := new(model.User)

	return user, db.Where("id = ?", obj.SellerID).Limit(1).Find(&user).Error
}

// User is the resolver for the user field.
func (r *userChatResolver) User(ctx context.Context, obj *model.UserChat) (*model.User, error) {
	db := config.GetDB()
	user := new(model.User)

	return user, db.Where("id = ?", obj.UserID).Limit(1).Find(&user).Error
}

// UserChatMessage is the resolver for the userChatMessage field.
func (r *userChatResolver) UserChatMessage(ctx context.Context, obj *model.UserChat) ([]*model.UserChatMessage, error) {
	panic(fmt.Errorf("not implemented: UserChatMessage - userChatMessage"))
}

// UserChatImage is the resolver for the userChatImage field.
func (r *userChatResolver) UserChatImage(ctx context.Context, obj *model.UserChat) ([]*model.UserChatImage, error) {
	panic(fmt.Errorf("not implemented: UserChatImage - userChatImage"))
}

// UserChat returns UserChatResolver implementation.
func (r *Resolver) UserChat() UserChatResolver { return &userChatResolver{r} }

type userChatResolver struct{ *Resolver }
